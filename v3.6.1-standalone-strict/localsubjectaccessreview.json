{
  "description": "LocalSubjectAccessReview is an object for requesting information about whether a user or group can perform an action in a particular namespace", 
  "required": [
    "namespace", 
    "verb", 
    "resourceAPIGroup", 
    "resourceAPIVersion", 
    "resource", 
    "resourceName", 
    "path", 
    "isNonResourceURL", 
    "user", 
    "groups", 
    "scopes"
  ], 
  "x-kubernetes-group-version-kind": [
    {
      "Kind": "LocalSubjectAccessReview", 
      "Version": "v1", 
      "Group": ""
    }, 
    {
      "Kind": "LocalSubjectAccessReview", 
      "Version": "v1", 
      "Group": "authorization.openshift.io"
    }
  ], 
  "$schema": "http://json-schema.org/schema#", 
  "type": "object", 
  "properties": {
    "scopes": {
      "items": {
        "type": [
          "string", 
          "null"
        ]
      }, 
      "type": [
        "array", 
        "null"
      ], 
      "description": "Scopes to use for the evaluation.  Empty means \"use the unscoped (full) permissions of the user/groups\". Nil for a self-SAR, means \"use the scopes on this request\". Nil for a regular SAR, means the same as empty."
    }, 
    "kind": {
      "type": [
        "string", 
        "null"
      ], 
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
    }, 
    "resource": {
      "type": [
        "string", 
        "null"
      ], 
      "description": "Resource is one of the existing resource types"
    }, 
    "namespace": {
      "type": [
        "string", 
        "null"
      ], 
      "description": "Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces"
    }, 
    "apiVersion": {
      "type": [
        "string", 
        "null"
      ], 
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
    }, 
    "isNonResourceURL": {
      "type": "boolean", 
      "description": "IsNonResourceURL is true if this is a request for a non-resource URL (outside of the resource hieraarchy)"
    }, 
    "resourceAPIVersion": {
      "type": [
        "string", 
        "null"
      ], 
      "description": "Version is the API version of the resource Serialized as resourceAPIVersion to avoid confusion with TypeMeta.apiVersion and ObjectMeta.resourceVersion when inlined"
    }, 
    "verb": {
      "type": [
        "string", 
        "null"
      ], 
      "description": "Verb is one of: get, list, watch, create, update, delete"
    }, 
    "resourceAPIGroup": {
      "type": [
        "string", 
        "null"
      ], 
      "description": "Group is the API group of the resource Serialized as resourceAPIGroup to avoid confusion with the 'groups' field when inlined"
    }, 
    "groups": {
      "items": {
        "type": [
          "string", 
          "null"
        ]
      }, 
      "type": [
        "array", 
        "null"
      ], 
      "description": "Groups is optional.  Groups is the list of groups to which the User belongs."
    }, 
    "resourceName": {
      "type": [
        "string", 
        "null"
      ], 
      "description": "ResourceName is the name of the resource being requested for a \"get\" or deleted for a \"delete\""
    }, 
    "path": {
      "type": [
        "string", 
        "null"
      ], 
      "description": "Path is the path of a non resource URL"
    }, 
    "content": {
      "additionalProperties": false, 
      "required": [
        "Raw"
      ], 
      "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)", 
      "properties": {
        "Raw": {
          "type": "string", 
          "description": "Raw is the underlying serialization of this object.", 
          "format": "byte"
        }
      }
    }, 
    "user": {
      "type": [
        "string", 
        "null"
      ], 
      "description": "User is optional.  If both User and Groups are empty, the current authenticated user is used."
    }
  }
}