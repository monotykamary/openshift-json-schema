{
  "description": "A route allows developers to expose services through an HTTP(S) aware load balancing and proxy layer via a public DNS entry. The route may further specify TLS options and a certificate, or specify a public CNAME that the router should also accept for HTTP and HTTPS traffic. An administrator typically configures their router to be visible outside the cluster firewall, and may also add additional security, caching, or traffic controls on the service content. Routers usually talk directly to the service endpoints.\n\nOnce a route is created, the `host` field may not be changed. Generally, routers use the oldest route with a given host when resolving conflicts.\n\nRouters are subject to additional customization and may support additional controls via the annotations field.\n\nBecause administrators may configure multiple routers, the route status field is used to return information to clients about the names and states of the route under each router. If a client chooses a duplicate name, for instance, the route status conditions are used to indicate the route cannot be chosen.", 
  "required": [
    "spec", 
    "status"
  ], 
  "x-kubernetes-group-version-kind": [
    {
      "Kind": "Route", 
      "Version": "v1", 
      "Group": ""
    }, 
    {
      "Kind": "Route", 
      "Version": "v1", 
      "Group": "route.openshift.io"
    }
  ], 
  "$schema": "http://json-schema.org/schema#", 
  "type": "object", 
  "properties": {
    "status": {
      "additionalProperties": false, 
      "required": [
        "ingress"
      ], 
      "description": "RouteStatus provides relevant info about the status of a route, including which routers acknowledge it.", 
      "properties": {
        "ingress": {
          "items": {
            "additionalProperties": false, 
            "description": "RouteIngress holds information about the places where a route is exposed.", 
            "properties": {
              "routerName": {
                "type": [
                  "string", 
                  "null"
                ], 
                "description": "Name is a name chosen by the router to identify itself; this value is required"
              }, 
              "host": {
                "type": [
                  "string", 
                  "null"
                ], 
                "description": "Host is the host string under which the route is exposed; this value is required"
              }, 
              "routerCanonicalHostname": {
                "type": [
                  "string", 
                  "null"
                ], 
                "description": "CanonicalHostname is the external host name for the router that can be used as a CNAME for the host requested for this route. This value is optional and may not be set in all cases."
              }, 
              "conditions": {
                "items": {
                  "additionalProperties": false, 
                  "required": [
                    "type", 
                    "status"
                  ], 
                  "description": "RouteIngressCondition contains details for the current condition of this route on a particular router.", 
                  "properties": {
                    "status": {
                      "type": "string", 
                      "description": "Status is the status of the condition. Can be True, False, Unknown."
                    }, 
                    "type": {
                      "type": "string", 
                      "description": "Type is the type of the condition. Currently only Ready."
                    }, 
                    "message": {
                      "type": [
                        "string", 
                        "null"
                      ], 
                      "description": "Human readable message indicating details about last transition."
                    }, 
                    "lastTransitionTime": {
                      "type": [
                        "string", 
                        "null"
                      ], 
                      "format": "date-time"
                    }, 
                    "reason": {
                      "type": [
                        "string", 
                        "null"
                      ], 
                      "description": "(brief) reason for the condition's last transition, and is usually a machine and human readable constant"
                    }
                  }
                }, 
                "type": [
                  "array", 
                  "null"
                ], 
                "description": "Conditions is the state of the route, may be empty."
              }, 
              "wildcardPolicy": {
                "type": [
                  "string", 
                  "null"
                ], 
                "description": "Wildcard policy is the wildcard policy that was allowed where this route is exposed."
              }
            }
          }, 
          "type": "array", 
          "description": "ingress describes the places where the route may be exposed. The list of ingress points may contain duplicate Host or RouterName values. Routes are considered live once they are `Ready`"
        }
      }
    }, 
    "kind": {
      "type": [
        "string", 
        "null"
      ], 
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
    }, 
    "spec": {
      "additionalProperties": false, 
      "required": [
        "host", 
        "to"
      ], 
      "description": "RouteSpec describes the hostname or path the route exposes, any security information, and one or more backends the route points to. Weights on each backend can define the balance of traffic sent to each backend - if all weights are zero the route will be considered to have no backends and return a standard 503 response.\n\nThe `tls` field is optional and allows specific certificates or behavior for the route. Routers typically configure a default certificate on a wildcard domain to terminate routes without explicit certificates, but custom hostnames usually must choose passthrough (send traffic directly to the backend via the TLS Server-Name- Indication field) or provide a certificate.", 
      "properties": {
        "tls": {
          "additionalProperties": false, 
          "required": [
            "termination"
          ], 
          "description": "TLSConfig defines config used to secure a route and provide termination", 
          "properties": {
            "key": {
              "type": [
                "string", 
                "null"
              ], 
              "description": "key provides key file contents"
            }, 
            "certificate": {
              "type": [
                "string", 
                "null"
              ], 
              "description": "certificate provides certificate contents"
            }, 
            "caCertificate": {
              "type": [
                "string", 
                "null"
              ], 
              "description": "caCertificate provides the cert authority certificate contents"
            }, 
            "insecureEdgeTerminationPolicy": {
              "type": [
                "string", 
                "null"
              ], 
              "description": "insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80.\n\n* Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port."
            }, 
            "termination": {
              "type": "string", 
              "description": "termination indicates termination type."
            }, 
            "destinationCACertificate": {
              "type": [
                "string", 
                "null"
              ], 
              "description": "destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify."
            }
          }
        }, 
        "wildcardPolicy": {
          "type": [
            "string", 
            "null"
          ], 
          "description": "Wildcard policy if any for the route. Currently only 'Subdomain' or 'None' is allowed."
        }, 
        "to": {
          "additionalProperties": false, 
          "required": [
            "kind", 
            "name", 
            "weight"
          ], 
          "description": "RouteTargetReference specifies the target that resolve into endpoints. Only the 'Service' kind is allowed. Use 'weight' field to emphasize one over others.", 
          "properties": {
            "kind": {
              "type": "string", 
              "description": "The kind of target that the route is referring to. Currently, only 'Service' is allowed"
            }, 
            "name": {
              "type": "string", 
              "description": "name of the service/target that is being referred to. e.g. name of the service"
            }, 
            "weight": {
              "type": "integer", 
              "description": "weight as an integer between 1 and 256 that specifies the target's relative weight against other target reference objects", 
              "format": "int32"
            }
          }
        }, 
        "host": {
          "type": "string", 
          "description": "host is an alias/DNS that points to the service. Optional. If not specified a route name will typically be automatically chosen. Must follow DNS952 subdomain conventions."
        }, 
        "alternateBackends": {
          "items": {
            "additionalProperties": false, 
            "required": [
              "kind", 
              "name", 
              "weight"
            ], 
            "description": "RouteTargetReference specifies the target that resolve into endpoints. Only the 'Service' kind is allowed. Use 'weight' field to emphasize one over others.", 
            "properties": {
              "kind": {
                "type": "string", 
                "description": "The kind of target that the route is referring to. Currently, only 'Service' is allowed"
              }, 
              "name": {
                "type": "string", 
                "description": "name of the service/target that is being referred to. e.g. name of the service"
              }, 
              "weight": {
                "type": "integer", 
                "description": "weight as an integer between 1 and 256 that specifies the target's relative weight against other target reference objects", 
                "format": "int32"
              }
            }
          }, 
          "type": [
            "array", 
            "null"
          ], 
          "description": "alternateBackends is an extension of the 'to' field. If more than one service needs to be pointed to, then use this field. Use the weight field in RouteTargetReference object to specify relative preference. If the weight field is zero, the backend is ignored."
        }, 
        "path": {
          "type": [
            "string", 
            "null"
          ], 
          "description": "Path that the router watches for, to route traffic for to the service. Optional"
        }, 
        "port": {
          "additionalProperties": false, 
          "required": [
            "targetPort"
          ], 
          "description": "RoutePort defines a port mapping from a router to an endpoint in the service endpoints.", 
          "properties": {
            "targetPort": {
              "oneOf": [
                {
                  "type": [
                    "string", 
                    "null"
                  ]
                }, 
                {
                  "type": "integer"
                }
              ]
            }
          }
        }
      }
    }, 
    "apiVersion": {
      "type": [
        "string", 
        "null"
      ], 
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
    }, 
    "metadata": {
      "additionalProperties": false, 
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.", 
      "properties": {
        "ownerReferences": {
          "items": {
            "additionalProperties": false, 
            "required": [
              "apiVersion", 
              "kind", 
              "name", 
              "uid"
            ], 
            "description": "OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.", 
            "properties": {
              "kind": {
                "type": "string", 
                "description": "Kind of the referent. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
              }, 
              "uid": {
                "type": "string", 
                "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
              }, 
              "apiVersion": {
                "type": "string", 
                "description": "API version of the referent."
              }, 
              "controller": {
                "type": "boolean", 
                "description": "If true, this reference points to the managing controller."
              }, 
              "blockOwnerDeletion": {
                "type": "boolean", 
                "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned."
              }, 
              "name": {
                "type": "string", 
                "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
              }
            }
          }, 
          "type": [
            "array", 
            "null"
          ], 
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."
        }, 
        "name": {
          "type": [
            "string", 
            "null"
          ], 
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
        }, 
        "deletionTimestamp": {
          "type": [
            "string", 
            "null"
          ], 
          "format": "date-time"
        }, 
        "clusterName": {
          "type": [
            "string", 
            "null"
          ], 
          "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."
        }, 
        "deletionGracePeriodSeconds": {
          "type": "integer", 
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.", 
          "format": "int64"
        }, 
        "labels": {
          "additionalProperties": {
            "type": [
              "string", 
              "null"
            ]
          }, 
          "type": "object", 
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"
        }, 
        "namespace": {
          "type": [
            "string", 
            "null"
          ], 
          "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
        }, 
        "generation": {
          "type": "integer", 
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.", 
          "format": "int64"
        }, 
        "finalizers": {
          "items": {
            "type": [
              "string", 
              "null"
            ]
          }, 
          "type": [
            "array", 
            "null"
          ], 
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed."
        }, 
        "resourceVersion": {
          "type": [
            "string", 
            "null"
          ], 
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency"
        }, 
        "generateName": {
          "type": [
            "string", 
            "null"
          ], 
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency"
        }, 
        "creationTimestamp": {
          "type": [
            "string", 
            "null"
          ], 
          "format": "date-time"
        }, 
        "annotations": {
          "additionalProperties": {
            "type": [
              "string", 
              "null"
            ]
          }, 
          "type": "object", 
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"
        }, 
        "selfLink": {
          "type": [
            "string", 
            "null"
          ], 
          "description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
        }, 
        "uid": {
          "type": [
            "string", 
            "null"
          ], 
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
        }
      }
    }
  }
}