{
  "description": "ImageStreamImage represents an Image that is retrieved by image name from an ImageStream.", 
  "required": [
    "image"
  ], 
  "x-kubernetes-group-version-kind": [
    {
      "Kind": "ImageStreamImage", 
      "Version": "v1", 
      "Group": ""
    }, 
    {
      "Kind": "ImageStreamImage", 
      "Version": "v1", 
      "Group": "image.openshift.io"
    }
  ], 
  "$schema": "http://json-schema.org/schema#", 
  "type": "object", 
  "properties": {
    "image": {
      "required": [
        "dockerImageLayers"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "Kind": "Image", 
          "Version": "v1", 
          "Group": ""
        }, 
        {
          "Kind": "Image", 
          "Version": "v1", 
          "Group": "image.openshift.io"
        }
      ], 
      "description": "Image is an immutable representation of a Docker image and metadata at a point in time.", 
      "properties": {
        "dockerImageConfig": {
          "type": [
            "string", 
            "null"
          ], 
          "description": "DockerImageConfig is a JSON blob that the runtime uses to set up the container. This is a part of manifest schema v2."
        }, 
        "dockerImageManifestMediaType": {
          "type": [
            "string", 
            "null"
          ], 
          "description": "DockerImageManifestMediaType specifies the mediaType of manifest. This is a part of manifest schema v2."
        }, 
        "dockerImageMetadataVersion": {
          "type": [
            "string", 
            "null"
          ], 
          "description": "DockerImageMetadataVersion conveys the version of the object, which if empty defaults to \"1.0\""
        }, 
        "signatures": {
          "items": {
            "required": [
              "type", 
              "content"
            ], 
            "x-kubernetes-group-version-kind": [
              {
                "Kind": "ImageSignature", 
                "Version": "v1", 
                "Group": ""
              }, 
              {
                "Kind": "ImageSignature", 
                "Version": "v1", 
                "Group": "image.openshift.io"
              }
            ], 
            "description": "ImageSignature holds a signature of an image. It allows to verify image identity and possibly other claims as long as the signature is trusted. Based on this information it is possible to restrict runnable images to those matching cluster-wide policy. Mandatory fields should be parsed by clients doing image verification. The others are parsed from signature's content by the server. They serve just an informative purpose.", 
            "properties": {
              "kind": {
                "type": [
                  "string", 
                  "null"
                ], 
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
              }, 
              "issuedBy": {
                "description": "SignatureIssuer holds information about an issuer of signing certificate or key.", 
                "properties": {
                  "organization": {
                    "type": [
                      "string", 
                      "null"
                    ], 
                    "description": "Organization name."
                  }, 
                  "commonName": {
                    "type": [
                      "string", 
                      "null"
                    ], 
                    "description": "Common name (e.g. openshift-signing-service)."
                  }
                }
              }, 
              "created": {
                "type": [
                  "string", 
                  "null"
                ], 
                "format": "date-time"
              }, 
              "issuedTo": {
                "required": [
                  "publicKeyID"
                ], 
                "description": "SignatureSubject holds information about a person or entity who created the signature.", 
                "properties": {
                  "organization": {
                    "type": [
                      "string", 
                      "null"
                    ], 
                    "description": "Organization name."
                  }, 
                  "commonName": {
                    "type": [
                      "string", 
                      "null"
                    ], 
                    "description": "Common name (e.g. openshift-signing-service)."
                  }, 
                  "publicKeyID": {
                    "type": "string", 
                    "description": "If present, it is a human readable key id of public key belonging to the subject used to verify image signature. It should contain at least 64 lowest bits of public key's fingerprint (e.g. 0x685ebe62bf278440)."
                  }
                }
              }, 
              "imageIdentity": {
                "type": [
                  "string", 
                  "null"
                ], 
                "description": "A human readable string representing image's identity. It could be a product name and version, or an image pull spec (e.g. \"registry.access.redhat.com/rhel7/rhel:7.2\")."
              }, 
              "apiVersion": {
                "type": [
                  "string", 
                  "null"
                ], 
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
              }, 
              "content": {
                "type": "string", 
                "description": "Required: An opaque binary string which is an image's signature.", 
                "format": "byte"
              }, 
              "type": {
                "type": "string", 
                "description": "Required: Describes a type of stored blob."
              }, 
              "signedClaims": {
                "additionalProperties": {
                  "type": [
                    "string", 
                    "null"
                  ]
                }, 
                "type": "object", 
                "description": "Contains claims from the signature."
              }, 
              "conditions": {
                "items": {
                  "required": [
                    "type", 
                    "status"
                  ], 
                  "description": "SignatureCondition describes an image signature condition of particular kind at particular probe time.", 
                  "properties": {
                    "status": {
                      "type": "string", 
                      "description": "Status of the condition, one of True, False, Unknown."
                    }, 
                    "lastTransitionTime": {
                      "type": [
                        "string", 
                        "null"
                      ], 
                      "format": "date-time"
                    }, 
                    "reason": {
                      "type": [
                        "string", 
                        "null"
                      ], 
                      "description": "(brief) reason for the condition's last transition."
                    }, 
                    "lastProbeTime": {
                      "type": [
                        "string", 
                        "null"
                      ], 
                      "format": "date-time"
                    }, 
                    "message": {
                      "type": [
                        "string", 
                        "null"
                      ], 
                      "description": "Human readable message indicating details about last transition."
                    }, 
                    "type": {
                      "type": "string", 
                      "description": "Type of signature condition, Complete or Failed."
                    }
                  }
                }, 
                "type": [
                  "array", 
                  "null"
                ], 
                "description": "Conditions represent the latest available observations of a signature's current state."
              }, 
              "metadata": {
                "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.", 
                "properties": {
                  "name": {
                    "type": [
                      "string", 
                      "null"
                    ], 
                    "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
                  }, 
                  "deletionTimestamp": {
                    "type": [
                      "string", 
                      "null"
                    ], 
                    "format": "date-time"
                  }, 
                  "clusterName": {
                    "type": [
                      "string", 
                      "null"
                    ], 
                    "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."
                  }, 
                  "deletionGracePeriodSeconds": {
                    "type": "integer", 
                    "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.", 
                    "format": "int64"
                  }, 
                  "labels": {
                    "additionalProperties": {
                      "type": [
                        "string", 
                        "null"
                      ]
                    }, 
                    "type": "object", 
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"
                  }, 
                  "namespace": {
                    "type": [
                      "string", 
                      "null"
                    ], 
                    "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
                  }, 
                  "finalizers": {
                    "items": {
                      "type": [
                        "string", 
                        "null"
                      ]
                    }, 
                    "type": [
                      "array", 
                      "null"
                    ], 
                    "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed."
                  }, 
                  "generation": {
                    "type": "integer", 
                    "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.", 
                    "format": "int64"
                  }, 
                  "generateName": {
                    "type": [
                      "string", 
                      "null"
                    ], 
                    "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency"
                  }, 
                  "resourceVersion": {
                    "type": [
                      "string", 
                      "null"
                    ], 
                    "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency"
                  }, 
                  "ownerReferences": {
                    "items": {
                      "required": [
                        "apiVersion", 
                        "kind", 
                        "name", 
                        "uid"
                      ], 
                      "description": "OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.", 
                      "properties": {
                        "kind": {
                          "type": "string", 
                          "description": "Kind of the referent. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
                        }, 
                        "uid": {
                          "type": "string", 
                          "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
                        }, 
                        "apiVersion": {
                          "type": "string", 
                          "description": "API version of the referent."
                        }, 
                        "controller": {
                          "type": "boolean", 
                          "description": "If true, this reference points to the managing controller."
                        }, 
                        "blockOwnerDeletion": {
                          "type": "boolean", 
                          "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned."
                        }, 
                        "name": {
                          "type": "string", 
                          "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
                        }
                      }
                    }, 
                    "type": [
                      "array", 
                      "null"
                    ], 
                    "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."
                  }, 
                  "creationTimestamp": {
                    "type": [
                      "string", 
                      "null"
                    ], 
                    "format": "date-time"
                  }, 
                  "annotations": {
                    "additionalProperties": {
                      "type": [
                        "string", 
                        "null"
                      ]
                    }, 
                    "type": "object", 
                    "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"
                  }, 
                  "selfLink": {
                    "type": [
                      "string", 
                      "null"
                    ], 
                    "description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
                  }, 
                  "uid": {
                    "type": [
                      "string", 
                      "null"
                    ], 
                    "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
                  }
                }
              }
            }
          }, 
          "type": [
            "array", 
            "null"
          ], 
          "description": "Signatures holds all signatures of the image."
        }, 
        "dockerImageLayers": {
          "items": {
            "required": [
              "name", 
              "size", 
              "mediaType"
            ], 
            "description": "ImageLayer represents a single layer of the image. Some images may have multiple layers. Some may have none.", 
            "properties": {
              "mediaType": {
                "type": "string", 
                "description": "MediaType of the referenced object."
              }, 
              "name": {
                "type": "string", 
                "description": "Name of the layer as defined by the underlying store."
              }, 
              "size": {
                "type": "integer", 
                "description": "Size of the layer in bytes as defined by the underlying store.", 
                "format": "int64"
              }
            }
          }, 
          "type": "array", 
          "description": "DockerImageLayers represents the layers in the image. May not be set if the image does not define that data."
        }, 
        "dockerImageManifest": {
          "type": [
            "string", 
            "null"
          ], 
          "description": "DockerImageManifest is the raw JSON of the manifest"
        }, 
        "dockerImageMetadata": {
          "required": [
            "Raw"
          ], 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)", 
          "properties": {
            "Raw": {
              "type": "string", 
              "description": "Raw is the underlying serialization of this object.", 
              "format": "byte"
            }
          }
        }, 
        "kind": {
          "type": [
            "string", 
            "null"
          ], 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": [
            "string", 
            "null"
          ], 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "dockerImageReference": {
          "type": [
            "string", 
            "null"
          ], 
          "description": "DockerImageReference is the string that can be used to pull this image."
        }, 
        "dockerImageSignatures": {
          "items": {
            "type": [
              "string", 
              "null"
            ], 
            "format": "byte"
          }, 
          "type": [
            "array", 
            "null"
          ], 
          "description": "DockerImageSignatures provides the signatures as opaque blobs. This is a part of manifest schema v1."
        }, 
        "metadata": {
          "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.", 
          "properties": {
            "name": {
              "type": [
                "string", 
                "null"
              ], 
              "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
            }, 
            "deletionTimestamp": {
              "type": [
                "string", 
                "null"
              ], 
              "format": "date-time"
            }, 
            "clusterName": {
              "type": [
                "string", 
                "null"
              ], 
              "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."
            }, 
            "deletionGracePeriodSeconds": {
              "type": "integer", 
              "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.", 
              "format": "int64"
            }, 
            "labels": {
              "additionalProperties": {
                "type": [
                  "string", 
                  "null"
                ]
              }, 
              "type": "object", 
              "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"
            }, 
            "namespace": {
              "type": [
                "string", 
                "null"
              ], 
              "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
            }, 
            "finalizers": {
              "items": {
                "type": [
                  "string", 
                  "null"
                ]
              }, 
              "type": [
                "array", 
                "null"
              ], 
              "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed."
            }, 
            "generation": {
              "type": "integer", 
              "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.", 
              "format": "int64"
            }, 
            "generateName": {
              "type": [
                "string", 
                "null"
              ], 
              "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency"
            }, 
            "resourceVersion": {
              "type": [
                "string", 
                "null"
              ], 
              "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency"
            }, 
            "ownerReferences": {
              "items": {
                "required": [
                  "apiVersion", 
                  "kind", 
                  "name", 
                  "uid"
                ], 
                "description": "OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.", 
                "properties": {
                  "kind": {
                    "type": "string", 
                    "description": "Kind of the referent. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
                  }, 
                  "uid": {
                    "type": "string", 
                    "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
                  }, 
                  "apiVersion": {
                    "type": "string", 
                    "description": "API version of the referent."
                  }, 
                  "controller": {
                    "type": "boolean", 
                    "description": "If true, this reference points to the managing controller."
                  }, 
                  "blockOwnerDeletion": {
                    "type": "boolean", 
                    "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned."
                  }, 
                  "name": {
                    "type": "string", 
                    "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
                  }
                }
              }, 
              "type": [
                "array", 
                "null"
              ], 
              "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."
            }, 
            "creationTimestamp": {
              "type": [
                "string", 
                "null"
              ], 
              "format": "date-time"
            }, 
            "annotations": {
              "additionalProperties": {
                "type": [
                  "string", 
                  "null"
                ]
              }, 
              "type": "object", 
              "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"
            }, 
            "selfLink": {
              "type": [
                "string", 
                "null"
              ], 
              "description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
            }, 
            "uid": {
              "type": [
                "string", 
                "null"
              ], 
              "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
            }
          }
        }
      }
    }, 
    "kind": {
      "type": [
        "string", 
        "null"
      ], 
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
    }, 
    "apiVersion": {
      "type": [
        "string", 
        "null"
      ], 
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
    }, 
    "metadata": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.", 
      "properties": {
        "name": {
          "type": [
            "string", 
            "null"
          ], 
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
        }, 
        "deletionTimestamp": {
          "type": [
            "string", 
            "null"
          ], 
          "format": "date-time"
        }, 
        "clusterName": {
          "type": [
            "string", 
            "null"
          ], 
          "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."
        }, 
        "deletionGracePeriodSeconds": {
          "type": "integer", 
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.", 
          "format": "int64"
        }, 
        "labels": {
          "additionalProperties": {
            "type": [
              "string", 
              "null"
            ]
          }, 
          "type": "object", 
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"
        }, 
        "namespace": {
          "type": [
            "string", 
            "null"
          ], 
          "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
        }, 
        "finalizers": {
          "items": {
            "type": [
              "string", 
              "null"
            ]
          }, 
          "type": [
            "array", 
            "null"
          ], 
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed."
        }, 
        "generation": {
          "type": "integer", 
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.", 
          "format": "int64"
        }, 
        "generateName": {
          "type": [
            "string", 
            "null"
          ], 
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency"
        }, 
        "resourceVersion": {
          "type": [
            "string", 
            "null"
          ], 
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency"
        }, 
        "ownerReferences": {
          "items": {
            "required": [
              "apiVersion", 
              "kind", 
              "name", 
              "uid"
            ], 
            "description": "OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.", 
            "properties": {
              "kind": {
                "type": "string", 
                "description": "Kind of the referent. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
              }, 
              "uid": {
                "type": "string", 
                "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
              }, 
              "apiVersion": {
                "type": "string", 
                "description": "API version of the referent."
              }, 
              "controller": {
                "type": "boolean", 
                "description": "If true, this reference points to the managing controller."
              }, 
              "blockOwnerDeletion": {
                "type": "boolean", 
                "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned."
              }, 
              "name": {
                "type": "string", 
                "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
              }
            }
          }, 
          "type": [
            "array", 
            "null"
          ], 
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."
        }, 
        "creationTimestamp": {
          "type": [
            "string", 
            "null"
          ], 
          "format": "date-time"
        }, 
        "annotations": {
          "additionalProperties": {
            "type": [
              "string", 
              "null"
            ]
          }, 
          "type": "object", 
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"
        }, 
        "selfLink": {
          "type": [
            "string", 
            "null"
          ], 
          "description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
        }, 
        "uid": {
          "type": [
            "string", 
            "null"
          ], 
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
        }
      }
    }
  }
}